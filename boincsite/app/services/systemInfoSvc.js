/**
 * Service to get various information about the connected BOINC client
 * and the computer that it is running on.
 *
 * Copyright (c) David Wilson 2016
 * This file is part of Zoetrope.
 * 
 * Zoetrope is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Zoetrope is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Zoetrope.  If not, see <http://www.gnu.org/licenses/>.
 */
angular.module('zoetropeServices')
  .factory('systemInfoSvc', SystemInfoService);


SystemInfoService.$inject = ['jsonSvc'];

function SystemInfoService(jsonSvc) {

  var svc = {
    getDiskUsage: getDiskUsage,
    getDailyTransferHistory: getDailyTransferHistory,
    getGlobalPreferences: getGlobalPreferences,
    getHostInfo: getHostInfo,
    getMessages: getMessages,
    getNotices: getNotices,
    getPlatform: getPlatform
  };

  /**
   * Get project-by-project disk usage and disk size/disk free details.
   *
   * Params:
   * @success: callback to run on success
   * @error: callback to run on error
   */
  function getDiskUsage(success, error) {
    return jsonSvc.getJson2('/disk_usage_json', false).then(success, error);
  }

  /**
   * Get upload/download figures for each day as well as total upload/download.
   *
   * Params:
   * @success: callback to run on success
   * @error: callback to run on error
   */
  function getDailyTransferHistory(success, error) {
    jsonSvc.getJson2('/daily_transfer_history_json', true).then(success, error);
  }

  /**
   * Get BOINC global preferences.
   *
   * Params:
   * @success: callback to run on success
   * @error: callback to run on error
   */
  function getGlobalPreferences(success, error) {
    return jsonSvc.getJson2('/get_global_preferences_json', false).then(success, error);
  }

  /**
   * Get information about the BOINC client and the computer it is running on.
   *
   * Params:
   * @success: callback to run on success
   * @error: callback to run on error
   */
  function getHostInfo(success, error) {
    return jsonSvc.getJson2('/host_info_json').then(success, error);
  }

  /**
   * Get all operational and project-related messages generated by the BOINC client.
   *
   * Params:
   * @success: callback to run on success
   * @error: callback to run on error
   */
  function getMessages(success, error) {
    return jsonSvc.getJson2('/messages_json', true).then(success, error);
  }

  /**
   * Get notices sent by attached projects.
   *
   * Params:
   * @success: callback to run on success
   * @error: callback to run on error
   */
  function getNotices(success, error) {
    return jsonSvc.getJson2('/notices_json', true).then(success, error);
  }

  /**
   * Get the name of the platform that the client is running on.
   * 
   * Params:
   * @success: callback to run on success
   * @error: callback to run on error
   */
  function getPlatform(success, error) {
    return jsonSvc.getJson2('/get_platform_json', false).then(success, error);
  }

  return svc;
}
